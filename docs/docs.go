// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/driver-healthcheck": {
            "get": {
                "description": "Checks if Driver Location API is up and running. Returns 200 OK with a success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Liveness probe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccess"
                        }
                    }
                }
            }
        },
        "/v1/drivers/search": {
            "post": {
                "security": [
                    {
                        "InternalAuth": []
                    }
                ],
                "description": "Returns drivers ordered by distance; distance (metres) is pre-calculated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Find nearest drivers",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SearchDriverRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of DriverWithDistance",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerError"
                        }
                    }
                }
            }
        },
        "/v1/healthz": {
            "get": {
                "description": "Returns 200 OK with a success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Liveness probe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccess"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.GeoPointDTO": {
            "type": "object",
            "required": [
                "coordinates",
                "type"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "maxItems": 180,
                    "minItems": -180,
                    "items": {
                        "type": "number"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handler.SearchDriverRequest": {
            "type": "object",
            "required": [
                "limit",
                "location",
                "radius"
            ],
            "properties": {
                "limit": {
                    "type": "integer",
                    "minimum": 1
                },
                "location": {
                    "$ref": "#/definitions/handler.GeoPointDTO"
                },
                "radius": {
                    "type": "number"
                }
            }
        },
        "response.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/response.APIError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.SwaggerSuccess": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "InternalAuth": {
            "description": "Internal calls only.  Format: \"Bearer \u003ctoken\u003e\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Macthing Driver API",
	Description:      "Finds Nearest Driver According to User Point",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
